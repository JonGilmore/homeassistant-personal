# Get the mean value of the different humidity sensors
  - platform: min_max
    name: House Humidity
    round_digits: 0
    type: mean
    entity_ids:
      - sensor.living_room_multisensor_relative_humidity
      - sensor.office_multisensor_relative_humidity
      - sensor.master_entry_humidity
      - sensor.sunroom_humidity

# Elk sensors & Aeotec Sensors
  - platform: template
    sensors:
      armed_status:
        entity_id:
          - alarm_control_panel.area001
        value_template: '{{ states.alarm_control_panel.area001.attributes["armed_status"] }}'
        friendly_name: 'House Armed Status'
      arm_up_state:
        entity_id:
          - alarm_control_panel.area001
        value_template: '{{ states.alarm_control_panel.area001.attributes["arm_up_state"] }}'
        friendly_name: 'House Arm Up State'
      alarm_state:
        entity_id:
          - alarm_control_panel.area001
        value_template: '{{ states.alarm_control_panel.area001.attributes["alarm_state"] }}'
        friendly_name: 'House Alarm State'
      garage_double_state:
        entity_id:
          - sensor.double_garage
        value_template: "{% if states.sensor.double_garage.state == 'Normal' %}closed{% elif states.sensor.double_garage.state == 'Violated' %}open{% else %}unknown{% endif %}"
        friendly_name: 'Garage Double State'
      garage_single_state:
        entity_id:
          - sensor.single_garage
        value_template: "{% if states.sensor.single_garage.state == 'Normal' %}closed{% elif states.sensor.single_garage.state == 'Violated' %}open{% else %}unknown{% endif %}"
        friendly_name: 'Garage Single State'
      garage_fridge_power:
        entity_id:
          - switch.garage_fridge
        value_template: '{{ states.switch.garage_fridge.attributes["current_power_w"] }}'
        friendly_name: 'Garage Fridge Power'
      garage_fridge_energy:
        entity_id:
          - switch.garage_fridge
        value_template: '{{ states.switch.garage_fridge.attributes["today_energy_kwh"] }}'
        friendly_name: 'Garage Fridge Energy'

# DARK SKY
  - platform: darksky
    api_key: !secret darksky_api
    forecast:
      - 0
      - 1
      - 2
    monitored_conditions:
      - summary
      - icon
      - nearest_storm_distance
      - nearest_storm_bearing
      - precip_type
      - precip_intensity
      - precip_probability
      - temperature
      - apparent_temperature
      - dew_point
      - wind_speed
      - wind_bearing
      - cloud_cover
      - humidity
      - pressure
      - visibility
      - ozone
      - minutely_summary
      - hourly_summary
      - daily_summary
      - temperature_high
      - temperature_low
      - apparent_temperature_high
      - apparent_temperature_low
      - precip_intensity_max

# # DARKNESS SENSORS
  - platform: template
    sensors:
      dark_inside:
        friendly_name: "Dark Inside?"
        value_template: >-
          {% if states.sensor.main_tv_lux.state | int < 110 %}True
          {% else %}False{% endif %}
      # dark_outside:
      #   friendly_name: 'Dark? (solar angle)'
      #   value_template: >-
      #     {%if (states.sensor.solar_angle.state |int < -1) %}true
      #     {% elif ( (states.sun.sun.attributes.elevation | int < 4.5) and (states.sensor.dark_sky_cloud_coverage.state | int > 80)) %}true
      #     {% elif ( (states.sun.sun.attributes.elevation | int < 6.5) and (states.sensor.dark_sky_cloud_coverage.state | int > 85)) %}true
      #     {% elif (states.sensor.dark_sky_cloud_coverage.state | int > 90) %}true
      #     {% else %} false {% endif %}
      # solar_angle:
      #   friendly_name: 'Solar Angle'
      #   value_template: '{{ "%+.1f"|format(states.sun.sun.attributes.elevation) }}'
      #   unit_of_measurement: 'Â°'
      # time_of_day:
      #   friendly_name: "Time of Day"
      #   value_template: >-
      #     {% if   (states.sensor.main_tv_lux.state | int < 250) and (sensor.time_of_day.state == "day"  ) %}dusk
      #     {% elif (states.sensor.main_tv_lux.state | int < 125) and (sensor.time_of_day.state == "dusk" ) %}night
      #     {% elif (states.sensor.main_tv_lux.state | int > 25) and (sensor.time_of_day.state == "night") %}dawn
      #     {% elif (states.sensor.main_tv_lux.state | int > 75) and (sensor.time_of_day.state == "dawn" ) %}day
      #     {% else %} error {% endif %}
      # period_of_day:
      #   friendly_name: 'period of the day'
      #   value_template: >-
      #     {% if (as_timestamp(states.sun.sun.attributes.next_dusk)) - (as_timestamp(states.sun.sun.attributes.next_setting)) < 0 %}dusk
      #     {% elif (as_timestamp(states.sun.sun.attributes.next_rising)) - (as_timestamp(states.sun.sun.attributes.next_dawn)) < 0 %}dawn
      #     {% elif (states.sun.sun.attributes.elevation) < 0 %}night
      #     {% else %}day{% endif %}
      #   icon_template: >-
      #     {% if is_state('sun.sun', 'above_horizon') %}mdi:weather-sunny
      #     {% else %}mdi:weather-night{% endif %}

# Target Humidity States
  - platform: template
    sensors:
      target_humidity_max_winter:
        value_template: >-
          {% if   states.sensor.dark_sky_temperature.state | int < -20 %}25
          {% elif states.sensor.dark_sky_temperature.state | int < -10 %}30
          {% elif states.sensor.dark_sky_temperature.state | int <   0 %}35
          {% elif states.sensor.dark_sky_temperature.state | int <  10 %}40
          {% elif states.sensor.dark_sky_temperature.state | int <  20 %}45
          {% else %} 55 {% endif %}
        friendly_name: 'Target Humidity - Max'
      target_humidity_min_winter:
        value_template: >-
          {% if   states.sensor.dark_sky_temperature.state | int < -20 %}15
          {% elif states.sensor.dark_sky_temperature.state | int < -10 %}20
          {% elif states.sensor.dark_sky_temperature.state | int <   0 %}25
          {% elif states.sensor.dark_sky_temperature.state | int <  10 %}30
          {% elif states.sensor.dark_sky_temperature.state | int <  20 %}35
          {% else %} 40 {% endif %}
        friendly_name: 'Target Humidity - Min'

# LOAD SENSORS
  - platform: template
    sensors:
      master_bed_occupied:
        value_template: >-
          {% if states.sensor.master_bed_value.state | int < 20400000 %}occupied
          {% else %} unoccupied {% endif %}
        friendly_name: 'Master Bed Occupied'
      master_bed_people:
        value_template: >-
          {% if   states.sensor.master_bed_value.state | int < 19500000 %}both
          {% elif states.sensor.master_bed_value.state | int < 20400000 %}one
          {% else %} nobody {% endif %}
        friendly_name: 'Master Bed People'

# VIRTUAL DEVICES
  - platform: template
    sensors:
      vacation_status:
        friendly_name: "Vacation?"
        value_template: >-
          {% if states.alarm_control_panel.area001.attributes["armed_status"] == "armed_to_vacation" %}true
          {% else %}false{% endif %}
      alarm_occupancy_status:
        friendly_name: "Occupied-Alarm?"
        value_template: >-
          {% if states.alarm_control_panel.area001.attributes["armed_status"] == "armed_to_vacation" or states.alarm_control_panel.area001.attributes["armed_status"] == "armed_away" %}false
          {% else %}true{% endif %}
      cell_occupancy_status:
        friendly_name: "Occupied-Cell?"
        value_template: >-
          {% if states.device_tracker.jon_ot.state == "home" or states.device_tracker.lauras_iphone.state == "home" %}true
          {% else %}false{% endif %}
      sleep_status:
        friendly_name: "Sleeping?"
        value_template: >-
          {% if states.alarm_control_panel.area001.attributes["armed_status"] == "armed_to_night_instant" or states.alarm_control_panel.area001.attributes["armed_status"] == "armed_to_night" %}true
          {% else %}false{% endif %}


# MOTION SENSORS
  # - platform: template
  #   sensors:
  #     living_room_pir:
  #       value_template: >-
  #         {% if   is_state("sensor.living_room_multisensor_burglar", "8") %}Violated
  #         {% elif is_state("sensor.living_room_multisensor_burglar", "3") %}Tamper Detected
  #         {% else %}Normal
  #         {% endif %}
  #       friendly_name: "Living Room PIR"
  #     office_pir:
  #       value_template: >-
  #         {% if   is_state("sensor.office_multisensor_burglar", "8") %}Violated
  #         {% elif is_state("sensor.office_multisensor_burglar", "3") %}Tamper Detected
  #         {% else %}Normal
  #         {% endif %}
  #       friendly_name: "Office PIR"
  #     master_closet_pir:
  #       value_template: >-
  #         {% if is_state("sensor.master_closet_burglar", "8") %}Violated
  #         {% else %}Normal
  #         {% endif %}
  #       friendly_name: "Master Closet PIR"
  #     pantry_pir:
  #       value_template: >-
  #         {% if is_state("sensor.pantry_burglar", "8") %}Violated
  #         {% else %}Normal
  #         {% endif %}
  #       friendly_name: "Pantry PIR"

# GRAFANA
  - platform: command_line
    name: "Download Grafana Pwr"
    command: !secret grafana_pwr
  - platform: command_line
    name: "Download Grafana Temp"
    command: !secret grafana_tmp

  - platform: systemmonitor
    resources:
      - type: last_boot
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: processor_use

# NUC Uptime Sensor
  - platform: template
    sensors:
      nuc_uptime:
        friendly_name: NUC Uptime
        entity_id: sensor.time
        value_template: >
          {% set up_time = as_timestamp(now()) - as_timestamp(states('sensor.last_boot')) %}
          {% set minutes = (up_time // 60) | int %}
          {% set hours = (minutes // 60) %}
          {% set days = (hours // 24) %}
          {% set weeks = (days // 7) %}
          {% set minutes = (minutes % 60) %}
          {% set hours =  (hours % 24) %}
          {% set days = (days % 7) %}
          {% macro phrase(value, name) %}
                    {%- set value = value %}
                    {%- set end = 's' if value > 1 else '' %}
                    {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
          {%- endmacro %}
          {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
          {% set last_comma = text.rfind(',') %}
          {% if last_comma != -1 %}
            {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
          {% endif %}
          {{ text }}